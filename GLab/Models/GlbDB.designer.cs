#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GLab.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GlabDB")]
	public partial class GlbDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUserRegistration(UserRegistration instance);
    partial void UpdateUserRegistration(UserRegistration instance);
    partial void DeleteUserRegistration(UserRegistration instance);
    partial void InsertUserPost(UserPost instance);
    partial void UpdateUserPost(UserPost instance);
    partial void DeleteUserPost(UserPost instance);
    #endregion
		
		public GlbDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["GlabDBConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public GlbDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GlbDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GlbDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GlbDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<UserRegistration> UserRegistrations
		{
			get
			{
				return this.GetTable<UserRegistration>();
			}
		}
		
		public System.Data.Linq.Table<UserPost> UserPosts
		{
			get
			{
				return this.GetTable<UserPost>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRegistration")]
	public partial class UserRegistration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Surname;
		
		private string _Email;
		
		private string _Password;
		
		private EntitySet<UserPost> _UserPosts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public UserRegistration()
		{
			this._UserPosts = new EntitySet<UserPost>(new Action<UserPost>(this.attach_UserPosts), new Action<UserPost>(this.detach_UserPosts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(32) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRegistration_UserPost", Storage="_UserPosts", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<UserPost> UserPosts
		{
			get
			{
				return this._UserPosts;
			}
			set
			{
				this._UserPosts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserPosts(UserPost entity)
		{
			this.SendPropertyChanging();
			entity.UserRegistration = this;
		}
		
		private void detach_UserPosts(UserPost entity)
		{
			this.SendPropertyChanging();
			entity.UserRegistration = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserPost")]
	public partial class UserPost : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private string _NewsTitle;
		
		private System.DateTime _CreateDate;
		
		private string _PictureName;
		
		private string _PictureExtension;
		
		private string _PicturePath;
		
		private string _AuthorName;
		
		private string _AuthorSurName;
		
		private string _NewsText;
		
		private EntityRef<UserRegistration> _UserRegistration;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnNewsTitleChanging(string value);
    partial void OnNewsTitleChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnPictureNameChanging(string value);
    partial void OnPictureNameChanged();
    partial void OnPictureExtensionChanging(string value);
    partial void OnPictureExtensionChanged();
    partial void OnPicturePathChanging(string value);
    partial void OnPicturePathChanged();
    partial void OnAuthorNameChanging(string value);
    partial void OnAuthorNameChanged();
    partial void OnAuthorSurNameChanging(string value);
    partial void OnAuthorSurNameChanged();
    partial void OnNewsTextChanging(string value);
    partial void OnNewsTextChanged();
    #endregion
		
		public UserPost()
		{
			this._UserRegistration = default(EntityRef<UserRegistration>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._UserRegistration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsTitle", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string NewsTitle
		{
			get
			{
				return this._NewsTitle;
			}
			set
			{
				if ((this._NewsTitle != value))
				{
					this.OnNewsTitleChanging(value);
					this.SendPropertyChanging();
					this._NewsTitle = value;
					this.SendPropertyChanged("NewsTitle");
					this.OnNewsTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PictureName", DbType="NVarChar(32) NOT NULL", CanBeNull=false)]
		public string PictureName
		{
			get
			{
				return this._PictureName;
			}
			set
			{
				if ((this._PictureName != value))
				{
					this.OnPictureNameChanging(value);
					this.SendPropertyChanging();
					this._PictureName = value;
					this.SendPropertyChanged("PictureName");
					this.OnPictureNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PictureExtension", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string PictureExtension
		{
			get
			{
				return this._PictureExtension;
			}
			set
			{
				if ((this._PictureExtension != value))
				{
					this.OnPictureExtensionChanging(value);
					this.SendPropertyChanging();
					this._PictureExtension = value;
					this.SendPropertyChanged("PictureExtension");
					this.OnPictureExtensionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PicturePath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicturePath
		{
			get
			{
				return this._PicturePath;
			}
			set
			{
				if ((this._PicturePath != value))
				{
					this.OnPicturePathChanging(value);
					this.SendPropertyChanging();
					this._PicturePath = value;
					this.SendPropertyChanged("PicturePath");
					this.OnPicturePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AuthorName
		{
			get
			{
				return this._AuthorName;
			}
			set
			{
				if ((this._AuthorName != value))
				{
					this.OnAuthorNameChanging(value);
					this.SendPropertyChanging();
					this._AuthorName = value;
					this.SendPropertyChanged("AuthorName");
					this.OnAuthorNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorSurName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AuthorSurName
		{
			get
			{
				return this._AuthorSurName;
			}
			set
			{
				if ((this._AuthorSurName != value))
				{
					this.OnAuthorSurNameChanging(value);
					this.SendPropertyChanging();
					this._AuthorSurName = value;
					this.SendPropertyChanged("AuthorSurName");
					this.OnAuthorSurNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsText", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string NewsText
		{
			get
			{
				return this._NewsText;
			}
			set
			{
				if ((this._NewsText != value))
				{
					this.OnNewsTextChanging(value);
					this.SendPropertyChanging();
					this._NewsText = value;
					this.SendPropertyChanged("NewsText");
					this.OnNewsTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRegistration_UserPost", Storage="_UserRegistration", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public UserRegistration UserRegistration
		{
			get
			{
				return this._UserRegistration.Entity;
			}
			set
			{
				UserRegistration previousValue = this._UserRegistration.Entity;
				if (((previousValue != value) 
							|| (this._UserRegistration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserRegistration.Entity = null;
						previousValue.UserPosts.Remove(this);
					}
					this._UserRegistration.Entity = value;
					if ((value != null))
					{
						value.UserPosts.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("UserRegistration");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
